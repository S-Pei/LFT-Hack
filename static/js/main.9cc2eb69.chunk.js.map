{"version":3,"sources":["model/worker.ts","components/BlurContainer.tsx","components/prediction/PredictionEntry.tsx","components/prediction/Prediction.tsx","components/SquareButton.tsx","Icons/gallery.svg","components/staticImage/ImageSelectorButton.tsx","Icons/close.svg","components/staticImage/ImageCloseButton.tsx","components/staticImage/StaticImage.tsx","components/startScreen/StartScreen.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","BlurContainer","additionalClassname","children","className","PredictionEntry","label","confidence","top","style","width","toString","toFixed","Prediction","sortedPredictions","predictions","Object","entries","sort","a","b","slice","id","map","idx","SquareButton","onClick","setHover","undefined","onMouseEnter","onMouseLeave","ImageSelectorButton","setImageFile","imageFile","fileInput","useRef","useEffect","current","value","click","src","gallery","alt","ref","type","accept","onChange","e","files","target","length","display","ImageCloseButton","close","StaticImage","predictCanvas","image","canvas","reader","FileReader","onload","img","Image","height","ctx","getContext","drawImage","result","backgroundImage","readAsDataURL","StartScreen","modelWorker","ModelWorker","App","useState","setPredictions","loadModel","disposeModel","useCallback","imageData","getImageData","predict","then","results","Confidences","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8GACI,IAAIA,EAAa,EAAQ,IACrBC,EAAU,CAAC,YAAY,eAAe,WAC1CC,EAAOC,QAAU,WAChB,IAAIC,EAAI,IAAIC,OAAO,IAA0B,iCAAkC,CAAEC,KAAM,qBAGvF,OAFAN,EAAWI,EAAGH,GAEPG,I,gSCaGG,EAb6C,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,oBAAqBC,EAAe,EAAfA,SAE5EC,EAAY,iBAIhB,OAHMF,IACFE,GAAqB,WAAOF,IAG5B,qBAAKE,UAAWA,EAAhB,SACMD,K,MCYCE,MAjBf,YAA0E,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,WAG7B,OAHqE,EAA5BC,IAIrC,sBAAiBJ,UAAU,mBAA3B,UACKE,EACEC,EACC,qBACIH,UAAW,kBAA4B,aAARE,EAAqB,oBAA8B,SAARA,EAAiB,qBAAuB,mBAClHG,MAAO,CAACC,OAAmB,IAAXH,GAAgBI,WAAa,OAEnD,KACN,qBAAKP,UAAY,eAAjB,SAAoCG,EAAaA,EAAWK,QAAQ,GAAGD,WAAa,SAR1EL,I,MCmBHO,MAvBf,YAA4D,IAEpDC,EAFaC,EAAsC,EAAtCA,YAAsC,IAAzBP,WAAyB,MAArB,EAAqB,EASvD,OANMO,IAEFD,EAAoBE,OAAOC,QAAQF,GAC9BG,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,MACxBE,MAAM,EAAGb,IAGd,qBAAKc,GAAG,cAAR,SACI,cAAC,EAAD,CAAepB,oBAAoB,uBAAnC,SACOY,EACCA,EAAkBS,KAAI,WAAsBC,GAAtB,uBAAElB,EAAF,KAASC,EAAT,YAClB,cAAC,EAAD,CAA6BD,MAAOA,EAAOC,WAAYA,EAAYC,IAAW,IAANgB,GAAlDlB,MAExB,cAAC,EAAD,CAAiBA,MAAO,oBCD/BmB,G,MAhB4C,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,SAAUxB,EAAe,EAAfA,SAE7E,OACI,qBACIuB,QAASA,EAAU,kBAAMA,UAAYE,EACrCC,aAAcF,EAAW,kBAAMA,GAAS,SAAQC,EAChDE,aAAcH,EAAW,kBAAMA,GAAS,SAASC,EAHrD,SAKI,cAAC,EAAD,CAAe1B,oBAAoB,gBAAnC,SACMC,QClBH,MAA0B,oC,MCwD1B4B,MA3Cf,YAAmF,IAArDC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,UAElCC,EAAYC,iBAAyB,MA4B3C,OAzBAC,qBACI,YACSH,GAAaC,EAAUG,UACxBH,EAAUG,QAAQC,MAAQ,MAGlC,CAACL,EAAWC,IAoBZ,sBACIZ,GAAG,sBACHI,QAlBQ,WACRQ,EAAUG,SACVH,EAAUG,QAAQE,SActB,UAII,cAAC,EAAD,UACI,qBAAKjB,GAAG,eAAekB,IAAKC,EAASC,IAAK,oBAE9C,uBAAOC,IAAKT,EAAWU,KAAK,OAAOC,OAAO,UAAUC,SAhB3C,SAACC,GACd,IAAMC,EAAQD,EAAEE,OAAOD,MACnBA,GAASA,EAAME,OAAS,GACxBlB,EAAagB,EAAM,KAaqDvC,MAAO,CAAC0C,QAAS,cCnDtF,MAA0B,kC,MC0B1BC,MAff,YAAkE,IAAvCpB,EAAsC,EAAtCA,aAMvB,OACI,qBAAKV,GAAG,qBAAR,SACI,cAAC,EAAD,CAAcI,QANN,WACZM,EAAa,OAKT,SACI,qBAAKV,GAAG,aAAakB,IAAKa,EAAOX,IAAK,e,MCqCvCY,MA7Cf,YAAgF,IAAzDC,EAAwD,EAAxDA,cAAeC,EAAyC,EAAzCA,MAAOxB,EAAkC,EAAlCA,aAEnCyB,EAAStB,iBAA0B,MACnCgB,EAAUhB,iBAAuB,MAkCvC,OAhCAC,qBAAU,WACN,IAAMsB,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACb,GAEb,IAAMc,EAAM,IAAIC,MAChBD,EAAID,OAAS,WACT,GAAIH,EAAOpB,QAAS,CAEhBoB,EAAOpB,QAAQ3B,MAAQmD,EAAInD,MAC3B+C,EAAOpB,QAAQ0B,OAASF,EAAIE,OAC5B,IAAMC,EAAMP,EAAOpB,QAAQ4B,WAAW,MAChCD,IAEFA,EAAIE,UAAUL,EAAI,EAAE,GAEpBN,EAAcE,EAAOpB,YAM7BU,EAAEE,SACFY,EAAIrB,IAAMO,EAAEE,OAAOkB,OACfhB,EAAQd,UACRc,EAAQd,QAAQ5B,MAAM2D,gBAAtB,cAA+CrB,EAAEE,OAAOkB,OAAxD,QAKZT,EAAOW,cAAcb,KACtB,CAACA,EAAOD,EAAeJ,IAGtB,sBAAK7B,GAAG,eAAeqB,IAAKQ,EAA5B,UACI,cAAC,EAAD,CAAkBnB,aAAcA,IAChC,wBAAQW,IAAKc,EAAQhD,MAAO,CAAC0C,QAAS,c,YCqBnCmB,MAlDf,YAA2E,IAArDtC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,UAG1BC,EAAYC,iBAAyB,MAkC3C,OA/BAC,qBACI,YACSH,GAAaC,EAAUG,UACxBH,EAAUG,QAAQC,MAAQ,MAGlC,CAACL,EAAWC,IAoBDC,iBAA0B,MACzBA,iBAAuB,MAKnC,sBAAK/B,UAAY,eAAjB,UACI,qBAAKA,UAAY,eACjBsB,QAxBQ,WACRQ,EAAUG,SACVH,EAAUG,QAAQE,SAqBlB,SAGA,+CAEA,uBAAOI,IAAKT,EAAWU,KAAK,OAAOC,OAAO,UAAUC,SArB3C,SAACC,GACd,IAAMC,EAAQD,EAAEE,OAAOD,MACnBA,GAASA,EAAME,OAAS,GACxBlB,EAAagB,EAAM,KAkBqDvC,MAAO,CAAC0C,QAAS,c,OCvD/FoB,E,MAAcC,KAmDLC,MA7Cf,WAEI,MAAsCC,wBAA8C9C,GAApF,mBAAOb,EAAP,KAAoB4D,EAApB,KAEA,EAAkCD,mBAAsB,MAAxD,mBAAOzC,EAAP,KAAkBD,EAAlB,KAGAI,qBAAU,WAEN,OADAmC,EAAYK,UAZE,wBACJ,qBAYH,WACHL,EAAYM,kBAEjB,IAGH,IAAMtB,EAAgBuB,uBAAY,SAACrB,GAE/B,IAAMO,EAAMP,EAAOQ,WAAW,MAC9B,GAAID,EAAK,CAEL,IAAMe,EAAYf,EAAIgB,aAAa,EAAG,EAAGvB,EAAO/C,MAAO+C,EAAOM,QAE9DQ,EAAYU,QAAQF,GAAWG,MAAK,SAACC,GAC7BA,GACAR,EAAeQ,EAAQC,mBAIpC,IAEH,OACI,gCACI,cAAC,EAAD,CAAqBpD,aAAcA,EAAcC,UAAWA,IAEvDA,EAED,qCACA,cAAC,EAAD,CAAasB,cAAeA,EAAeC,MAAOvB,EAAWD,aAAcA,IAC3E,cAAC,EAAD,CAAYjB,YAAaA,OAHzB,cAAC,EAAD,CAAaiB,aAAcA,EAAcC,UAAWA,QCvCrDoD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9cc2eb69.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"loadModel\",\"disposeModel\",\"predict\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"6571198f39ddfec43afb.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import React, {FunctionComponent} from \"react\";\nimport './BlurContainer.css';\n\ntype BlurContainerType = {\n    additionalClassname?: string\n}\n\nconst BlurContainer: FunctionComponent<BlurContainerType> = ({ additionalClassname, children }) => {\n    // simple container with rounded corners and a blurred translucent background\n    let className = \"blur-container\";\n    if (!!additionalClassname) {\n        className = className + ` ${additionalClassname}`;\n    }\n    return (\n        <div className={className}>\n            { children }\n        </div>\n    );\n}\n\nexport default BlurContainer;\n","import React from \"react\";\nimport \"./PredictionEntry.css\";\n\ntype PredictionEntryProps = {\n    label: string\n    confidence?: number\n    top?: boolean\n\n}\n\nfunction PredictionEntry({label, confidence, top}: PredictionEntryProps) {\n    // render the predicted label and a bar representing the confidence value\n    // make the top confidence value green\n    return (\n        <div key={label} className=\"prediction-entry\">\n            {label}\n            {!!confidence ?\n                <div\n                    className={\"prediction-bar\" + (label===\"Negative\" ? \" prediction-green\" : label===\"Null\" ? ' prediction-yellow' : ' prediction-red')}\n                    style={{width: (confidence*100).toString() + \"%\"}}\n                />\n            : null}\n        <div className = 'number-label' >{!!confidence ? confidence.toFixed(4).toString() : null }</div>\n        </div>\n    );\n}\n\nexport default PredictionEntry;\n","import React from \"react\";\nimport BlurContainer from \"../BlurContainer\";\nimport PredictionEntry from \"./PredictionEntry\";\nimport \"./Prediction.css\";\n\ntype PredictionProps = {\n    predictions?: { [label: string]: number },\n    top?: number\n}\n\nfunction Prediction({predictions, top=3}: PredictionProps) {\n    // display the top N (default 3) predictions returned from the model\n    let sortedPredictions: Array<[string, number]> | undefined;\n    if (!!predictions) {\n        // sort our predictions by the confidence value and take the top N\n        sortedPredictions = Object.entries(predictions)\n            .sort((a, b) => b[1] - a[1])\n            .slice(0, top);\n    }\n    return (\n        <div id=\"predictions\">\n            <BlurContainer additionalClassname=\"prediction-container\">\n                {!!sortedPredictions ?\n                    sortedPredictions.map(([label, confidence], idx) => (\n                        <PredictionEntry key={label} label={label} confidence={confidence} top={idx===0}  />\n                    ))\n                    : <PredictionEntry label={'Loading...'} />\n                }\n            </BlurContainer>\n        </div>\n    );\n}\n\nexport default Prediction;\n","import React, {FunctionComponent} from \"react\";\nimport BlurContainer from \"./BlurContainer\";\nimport \"./SquareButton.css\";\n\ntype SquareButtonProps = {\n    onClick?: () => void,\n    setHover?: (hovering: boolean) => void\n};\n\nconst SquareButton: FunctionComponent<SquareButtonProps> = ({ onClick, setHover, children }) => {\n    // Square button that is inside the blur container\n    return (\n        <div\n            onClick={onClick ? () => onClick() : undefined}\n            onMouseEnter={setHover ? () => setHover(true) : undefined}\n            onMouseLeave={setHover ? () => setHover(false) : undefined}\n        >\n            <BlurContainer additionalClassname=\"square-button\">\n                { children }\n            </BlurContainer>\n        </div>\n\n    );\n}\n\nexport default SquareButton;\n","export default __webpack_public_path__ + \"static/media/gallery.45752e9c.svg\";","import React, {useEffect, useRef} from \"react\";\nimport SquareButton from \"../SquareButton\";\nimport gallery from \"../../Icons/gallery.svg\";\n\n\nimport \"./ImageSelectorButton.css\";\n\ntype ImageSelectorButtonProps = {\n    setImageFile: (image: File | null) => void;\n    imageFile: File | null;\n};\n\n// Component for selecting an image file for prediction\nfunction ImageSelectorButton({setImageFile, imageFile}: ImageSelectorButtonProps) {\n    // ref to the hidden file input element\n    const fileInput = useRef<HTMLInputElement>(null);\n\n    // if we have a null file (from clearing the image), clear the file input value\n    useEffect(\n        () => {\n            if (!imageFile && fileInput.current) {\n                fileInput.current.value = \"\";\n            }\n        },\n        [imageFile, fileInput]\n    )\n\n    // make an onclick that will open the file dialog\n    const onClick = () => {\n        if (fileInput.current) {\n            fileInput.current.click();\n        }\n    }\n\n    // set our image file from the picker\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n        if (files && files.length > 0) {\n            setImageFile(files[0])\n           ;\n        }\n    }\n\n    return (\n        <div\n            id=\"image-select-button\"\n            onClick={onClick}\n        >\n            <SquareButton>\n                <img id=\"gallery-icon\" src={gallery} alt={\"File Selector\"} />\n            </SquareButton>\n            <input ref={fileInput} type=\"file\" accept=\"image/*\" onChange={onChange} style={{display: \"none\"}} />\n        </div>\n    )\n}\n\nexport default ImageSelectorButton;\n","export default __webpack_public_path__ + \"static/media/close.b502d4ba.svg\";","import React from \"react\";\nimport SquareButton from \"../SquareButton\";\nimport close from \"../../Icons/close.svg\";\n\nimport \"./ImageCloseButton.css\";\n\ntype ImageCloseButtonProps = {\n    setImageFile: (image: File | null) => void;\n};\n\n// Component for clearing the static image and going back to the webcam view\nfunction ImageCloseButton({setImageFile}: ImageCloseButtonProps) {\n    \n    const onClick = () => {\n        setImageFile(null);\n    };\n\n    return (\n        <div id=\"image-close-button\">\n            <SquareButton onClick={onClick}>\n                <img id=\"close-icon\" src={close} alt={\"Close\"} />\n            </SquareButton>\n        </div>\n    )\n}\n\nexport default ImageCloseButton;\n","import React, {useEffect, useRef} from \"react\";\nimport ImageCloseButton from \"./ImageCloseButton\";\n\nimport \"./StaticImage.css\";\n\ntype StaticImageProps = {\n    predictCanvas: (canvas: HTMLCanvasElement) => void;\n    image: File;\n    setImageFile: (image: File | null) => void;\n}\n\n// Component for displaying our selected image file for prediction\nfunction StaticImage({ predictCanvas, image, setImageFile }: StaticImageProps) {\n    // display our image file on a canvas and call the predict function with that canvas\n    const canvas = useRef<HTMLCanvasElement>(null);\n    const display = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            // make an image to draw on the canvas\n            const img = new Image();\n            img.onload = () => {\n                if (canvas.current) {\n                    // draw the image on our canvas\n                    canvas.current.width = img.width;\n                    canvas.current.height = img.height;\n                    const ctx = canvas.current.getContext(\"2d\");\n                    if (!!ctx) {\n                        // draw our image on the context\n                        ctx.drawImage(img,0,0);\n                        // drawing is finished, run the prediction!\n                        predictCanvas(canvas.current);\n                    }\n                }\n            }\n\n            // load the image from our reader\n            if (e.target) {\n                img.src = e.target.result as string;\n                if (display.current) {\n                    display.current.style.backgroundImage = `url(${e.target.result})`;\n                }\n            }\n        }\n        // read our image file and process it!\n        reader.readAsDataURL(image);\n    }, [image, predictCanvas, display]);\n\n    return (\n        <div id=\"static-image\" ref={display}>\n            <ImageCloseButton setImageFile={setImageFile} />\n            <canvas ref={canvas} style={{display: \"none\"}} />\n        </div>\n    )\n}\n\nexport default StaticImage;\n","import React, {useEffect, useRef} from \"react\";\nimport SquareButton from \"../SquareButton\";\nimport gallery from \"../../Icons/gallery.svg\";\n\nimport \"./ImageSelectorButton.css\";\n\n\nimport \"./StartScreen.css\";\n\ntype StartScreenProps = {\n    predictCanvas: (canvas: HTMLCanvasElement) => void;\n    image: File;\n    setImageFile: (image: File | null) => void;\n}\n\n\n\ntype ImageSelectorButtonProps = {\n    setImageFile: (image: File | null) => void;\n    imageFile: File | null;\n};\n\n// Component for displaying our selected image file for prediction\nfunction StartScreen({setImageFile, imageFile}: ImageSelectorButtonProps) {\n\n    // ref to the hidden file input element\n    const fileInput = useRef<HTMLInputElement>(null);\n\n    // if we have a null file (from clearing the image), clear the file input value\n    useEffect(\n        () => {\n            if (!imageFile && fileInput.current) {\n                fileInput.current.value = \"\";\n            }\n        },\n        [imageFile, fileInput]\n    )\n\n    // make an onclick that will open the file dialog\n    const onClick = () => {\n        if (fileInput.current) {\n            fileInput.current.click();\n        }\n    }\n\n    // set our image file from the picker\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n        if (files && files.length > 0) {\n            setImageFile(files[0]);\n        }\n    }\n\n\n\n    const canvas = useRef<HTMLCanvasElement>(null);\n    const display = useRef<HTMLDivElement>(null);\n\n \n\n    return (\n        <div className = 'start-screen'>\n            <div className = 'center-modal'\n            onClick={onClick}>\n\n            <h1>Add a photo</h1>\n            </div>\n            <input ref={fileInput} type=\"file\" accept=\"image/*\" onChange={onChange} style={{display: \"none\"}} />\n        </div>\n    )\n}\n\n\nexport default StartScreen;\n","import React, {useCallback, useEffect, useState} from 'react';\n\nimport Prediction from './prediction/Prediction';\nimport ImageSelectorButton from './staticImage/ImageSelectorButton';\nimport StaticImage from './staticImage/StaticImage';\nimport StartScreen from './startScreen/StartScreen';\n\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport ModelWorker from \"workerize-loader!../model/worker\";\n\n// create our web worker instance for running the tfjs model without blocking the UI thread\nconst modelWorker = ModelWorker();\n// the filepaths to our exported signature.json and model.json files (in the public/model folder)\nconst signatureFile = process.env.PUBLIC_URL + `/model/signature.json`;\nconst modelFile = process.env.PUBLIC_URL + `/model/model.json`;\n\n\nfunction App() {\n    // state for keeping track of our predictions -- map of {label: confidence} from running the model on an image\n    const [predictions, setPredictions] = useState<{[key: string]: number} | undefined>(undefined);\n    // state for using a static image from file picker\n    const [imageFile, setImageFile] = useState<File | null>(null);\n\n    // useEffect callback to load our model\n    useEffect(() => {\n        modelWorker.loadModel(signatureFile, modelFile);\n        return () => {\n            modelWorker.disposeModel();\n        };\n    }, []);\n\n    // function to run the image from an html canvas element through our model\n    const predictCanvas = useCallback((canvas: HTMLCanvasElement) => {\n        // get the canvas context\n        const ctx = canvas.getContext('2d');\n        if (ctx) {\n            // get the pixel data from the full canvas\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            // run the async predict function and set the values to our state\n            modelWorker.predict(imageData).then((results: {Confidences: {[label: string]: number}}) => {\n                if (results) {\n                    setPredictions(results.Confidences);\n                }\n            });\n        }\n    }, []);\n\n    return (\n        <div>\n            <ImageSelectorButton setImageFile={setImageFile} imageFile={imageFile} />\n            {\n                !imageFile ? \n                <StartScreen setImageFile={setImageFile} imageFile={imageFile}/> :\n                <>\n                <StaticImage predictCanvas={predictCanvas} image={imageFile} setImageFile={setImageFile} />\n                <Prediction predictions={predictions}/>\n                </>   \n            }            \n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}